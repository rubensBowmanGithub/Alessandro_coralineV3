#
# Copyright 2019 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

upgraderVersion: 1

# The YAML parser converts to closest type possible,
# for example:
#    Hello is parsed a String
#    1 is parsed as an Integer
#    true is parsed as a Boolean
#    [] is parsed as a List
#    [{"K","V"}] is parsed as a List of Map
#
# To force A String value surround the value with double quotes
#
# When dealing with configurations that are Java enums treat them as String values
#
upgrades:
  - toVersion: 1                          # upgrades up to version 1
    actions:                              # applies the actions in order

    - setConfig:                          # sets a configuration
        name: foo
        value: bar                        # value is a string or JSON
                                          # If the value is a string it can be an EL expression using the
                                          # value(configName) EL function. For example:
                                          #
                                          #     - setConfig:
                                          #         name: server.hostPort
                                          #         value: ${value("server.host")}:${${value("server.port")}
                                          #
                                          # The value(<configName>) function gives access to the value of the 'configName'
                                          # configuration value before the upgrade to 'toVersion' started.
                                          #
                                          # EL expressions are supported in setConfig#value, replaceConfig#newValue &
                                          # replaceConfig#elseNewValue


    - setConfig:                          # sets a configuration if a given config exists
        lookForName: found                # name of the configuration to look for
        name: addedBecauseFound           # name of the configuration to set
        value: [{}]                       # this is an example of a JSON value

    - setConfig:                          # sets a configuration if a given config does not exists
        lookForName: missing
        elseName: addedBecauseMissing
        elseValue: MISSING

    - setConfig:                          # sets a configuration if queryName exists and has queryValue value
        lookForName: queryName
        ifValueMatches: queryValue        # value of the configuration to look for (can be a Java regex)
        name: addedBecauseMatching
        value: 3

    - setConfig:                          # sets a configuration if queryName does not exists or has a value different than queryValue
        lookForName: queryName
        ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
        elseName: addedBecauseNotMatching
        elseValue: 5

    - setConfig:                          # conditionally sets a config depending on the existence of queryName
        lookForName: queryName
        name: foo                         # configuration to set when queryName exists
        value: 3
        elseName: bar                     # configuration to set when queryName does not exist
        elseValue: 5

    - setConfig:                          # conditionally set a config depending on queryName having queryValue value
        lookForName: queryName
        ifValueMatches: queryValue        # value for the configuration to look for (can be a Java regex)
        name: foo                         # configuration to set when queryName exists and equals queryValue
        value: 3
        elseName: bar                     # configuration to set when either queryName does not exist or does not equal queryValue
        elseValue: 5

    - renameConfig:                       # renames configurations
        oldNamePattern: prefix\.(.*$)     # Java regex, () can be used to define groups. CAUTION: this may accidentally capture "stage.*"
                                          # configurations, e.g. when using "(.*$)" as oldNamePattern. Use something like "^(?!stage)(.*$)" to avoid it.
        newNamePattern: newPrefix.(0)     # new pattern, it can reference groups from the old pattern using (#)

    - removeConfigs:
        namePattern: remove.*

    - replaceConfig:
        name: replace
        ifOldValueMatches: .*REPLACE.*    # optional, default .* (always)
        newValue: NEW_VALUE_$$$
        elseNewValue: $$$$_ELSE_VALUE     # optional, no default
        tokenForOldValue: $$$             # optional, default $$

    - iterateListConfig:
        name: listConfig
        actions:
        - setConfig:
            name: foo
            value: bar
        - renameConfig:
            oldNamePattern: prefix\.(.*$)
            newNamePattern: newPrefix.(0)
        - setConfig:
            lookForName: missing
            elseName: addedBecauseMissing
            elseValue: [{}]
        - setConfig:
            lookForName: found
            name: addedBecauseFound
            value: FOUND
        - removeConfigs:
            namePattern: remove.*
        - replaceConfig:
            name: replace
            ifOldValueMatches: .*REPLACE.*    # optional, default .* (always)
            newValue: NEW_VALUE_$$$
            elseNewValue: $$$$_ELSE_VALUE     # optional, no default
            tokenForOldValue: $$$             # optional, default $$
        - configStringMapPut:
            lookForName: queryName
            ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
            name: mapConfig
            key: key
            value: value
        - configStringMapRemove:
            lookForName: queryName
            ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
            name: mapConfig
            key: key                          # optional, key or value must be set
        - configStringMapRemove:
            lookForName: queryName
            ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
            name: mapConfig
            value: value                      # optional, key or value must be set
        - configStringListAdd:
            lookForName: queryName
            ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
            name: listConfig
            value: value
        - configStringListRemove:
            lookForName: queryName
            ifValueMatches: queryValue        # comparison value for the configuration to look for (can be a Java regex)
            name: listConfig
            value: value

    - configStringMapPut:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: mapConfig
        key: key
        value: value
    - configStringMapRemove:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: mapConfig
        key: key                              # optional, key or value must be set
    - configStringMapRemove:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: mapConfig
        value: value                          # optional, key or value must be set
    - configStringListAdd:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: listConfig
        value: value
    - configStringListRemove:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: listConfig
        value: value
    - setConfigFromStringMap:
        lookForName: queryName
        ifValueMatches: queryValue            # comparison value for the configuration to look for (can be a Java regex)
        name: configName                      # name of the config that is going to be set
        mapName: mapName                      # name of the map that should contain the value to be set
        key: key                              # key for which the value will be set
    - setConfigFromConfigList:
        listName: listName                    # Name of the list
        elementName: elementName              # Name of the config element within the list
        name: fieldName                       # Name of the target config field
        deleteFieldInList: trueOrFalse        # Remove the config from the list

  - toVersion: 2
    actions:
    - setConfig:
        name: foofoo
        value: barbar

  - toVersion: 3
    actions:
    - setConfig:
        name: foofoofoo
        value: barbarbar
